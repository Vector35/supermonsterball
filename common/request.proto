syntax = "proto3";
package request;

message Request
{
	enum RequestType
	{
		Invalid = 0;
		Login = 1;
		Register = 2;
		GetPlayerDetails = 3;
		GetMonsterList = 4;
		GetMonstersSeenAndCaptured = 5;
		GetTreats = 6;
		GetInventory = 7;
		GetMonstersInRange = 8;
		StartEncounter = 9;
		GiveSeed = 10;
		ThrowBall = 11;
		RunFromEncounter = 12;
		PowerUpMonster = 13;
		EvolveMonster = 14;
		TransferMonster = 15;
		SetMonsterName = 16;
		GetMapTiles = 17;
		GetRecentStops = 18;
		GetItemsFromStop = 19;
		SetTeam = 20;
		GetPitStatus = 21;
		AssignPitDefender = 22;
		StartPitBattle = 23;
		SetAttacker = 24;
		StepPitBattle = 25;
		SetPitBattleAction = 26;
		EndPitBattle = 27;
		HealMonster = 28;
		GetLevel40Flag = 29;
		GetCatchEmAllFlag = 30;
	}

	RequestType type = 1;
	bytes data = 2;
}

message LoginRequest
{
	string username = 1;
	string password = 2;
}

message LoginResponse
{
	enum AccountStatus
	{
		Unknown = 0;
		LoginOK = 1;
		InvalidUsernameOrPassword = 2;
		AccountBanned = 3;
	}

	AccountStatus status = 1;
	uint64 id = 2;
}

message RegisterRequest
{
	string username = 1;
	string password = 2;
}

message RegisterResponse
{
	enum RegisterStatus
	{
		Unknown = 0;
		RegisterOK = 1;
		InvalidOrDuplicateUsername = 2;
		BadPassword = 3;
	}

	RegisterStatus status = 1;
	uint64 id = 2;
}

message GetPlayerDetailsResponse
{
	uint32 level = 1;
	uint32 xp = 2;
	uint32 powder = 3;
	int32 x = 4;
	int32 y = 5;
	uint32 team = 6;
}

message GetMonsterListResponse
{
	message MonsterDetails
	{
		uint64 id = 1;
		uint32 species = 2;
		string name = 3;
		uint32 hp = 4;
		uint32 attack = 5;
		uint32 defense = 6;
		uint32 stamina = 7;
		uint32 size = 8;
		uint32 level = 9;
		int32 x = 10;
		int32 y = 11;
		uint32 spawntime = 12;
		uint32 ball = 13;
		uint32 quickmove = 14;
		uint32 chargemove = 15;
		bool defending = 16;
	}
	repeated MonsterDetails monsters = 1;
}

message GetMonstersSeenAndCapturedResponse
{
	message SpeciesAndCount
	{
		uint32 species = 1;
		uint32 count = 2;
	}
	repeated SpeciesAndCount seen = 1;
	repeated SpeciesAndCount captured = 2;
}

message GetTreatsResponse
{
	message SpeciesAndCount
	{
		uint32 species = 1;
		uint32 count = 2;
	}
	repeated SpeciesAndCount treats = 1;
}

message GetInventoryResponse
{
	message InventoryItem
	{
		uint32 item = 1;
		uint32 count = 2;
	}
	repeated InventoryItem items = 1;
}

message GetMonstersInRangeRequest
{
	int32 x = 1;
	int32 y = 2;
}

message GetMonstersInRangeResponse
{
	message MonsterSighting
	{
		uint32 species = 1;
		int32 x = 2;
		int32 y = 3;
	}
	repeated MonsterSighting sightings = 1;
}

message StartEncounterRequest
{
	int32 x = 1;
	int32 y = 2;
}

message StartEncounterResponse
{
	bool valid = 1;
	uint32 species = 2;
	uint32 attack = 3;
	uint32 defense = 4;
	uint32 stamina = 5;
	uint32 size = 6;
	uint32 level = 7;
	uint32 spawntime = 8;
	uint32 quickmove = 9;
	uint32 chargemove = 10;
}

message GiveSeedResponse
{
	bool ok = 1;
}

message ThrowBallRequest
{
	uint32 ball = 1;
}

message ThrowBallResponse
{
	enum BallThrowResult
	{
		THROW_RESULT_CATCH = 0;
		THROW_RESULT_BREAK_OUT_AFTER_ONE = 1;
		THROW_RESULT_BREAK_OUT_AFTER_TWO = 2;
		THROW_RESULT_BREAK_OUT_AFTER_THREE = 3;
		THROW_RESULT_RUN_AWAY_AFTER_ONE = 4;
		THROW_RESULT_RUN_AWAY_AFTER_TWO = 5;
		THROW_RESULT_RUN_AWAY_AFTER_THREE = 6;
	}
	BallThrowResult result = 1;
	uint64 catchid = 2;
}

message GetMapTilesRequest
{
	int32 x = 1;
	int32 y = 2;
}

message GetMapTilesResponse
{
	bytes data = 1;
}

message PowerUpMonsterRequest
{
	uint64 id = 1;
}

message PowerUpMonsterResponse
{
	bool ok = 1;
	uint32 level = 2;
}

message EvolveMonsterRequest
{
	uint64 id = 1;
}

message EvolveMonsterResponse
{
	bool ok = 1;
	uint32 species = 2;
	string name = 3;
	uint32 hp = 4;
	uint32 quickmove = 5;
	uint32 chargemove = 6;
}

message TransferMonsterRequest
{
	uint64 id = 1;
}

message SetMonsterNameRequest
{
	uint64 id = 1;
	string name = 2;
}

message GetRecentStopsResponse
{
	message RecentStopVisit
	{
		int32 x = 1;
		int32 y = 2;
		uint32 t = 3;
	}
	repeated RecentStopVisit stops = 1;
}

message GetItemsFromStopRequest
{
	int32 x = 1;
	int32 y = 2;
}

message GetItemsFromStopResponse
{
	message InventoryItem
	{
		uint32 item = 1;
		uint32 count = 2;
	}
	repeated InventoryItem items = 1;
}

message SetTeamRequest
{
	enum Team
	{
		TEAM_UNASSIGNED = 0;
		TEAM_RED = 1;
		TEAM_BLUE = 2;
		TEAM_YELLOW = 3;
	}
	Team team = 1;
}

message GetPitStatusRequest
{
	int32 x = 1;
	int32 y = 2;
}

message GetPitStatusResponse
{
	enum Team
	{
		TEAM_UNASSIGNED = 0;
		TEAM_RED = 1;
		TEAM_BLUE = 2;
		TEAM_YELLOW = 3;
	}

	message MonsterDetails
	{
		uint64 owner = 1;
		string ownername = 2;
		uint64 id = 3;
		uint32 species = 4;
		string name = 5;
		uint32 hp = 6;
		uint32 attack = 7;
		uint32 defense = 8;
		uint32 stamina = 9;
		uint32 size = 10;
		uint32 level = 11;
		uint32 quickmove = 12;
		uint32 chargemove = 13;
	}

	Team team = 1;
	uint32 reputation = 2;
	repeated MonsterDetails defenders = 3;
}

message AssignPitDefenderRequest
{
	int32 x = 1;
	int32 y = 2;
	uint64 id = 3;
}

message AssignPitDefenderResponse
{
	bool ok = 1;
}

message StartPitBattleRequest
{
	int32 x = 1;
	int32 y = 2;
	repeated uint64 monsters = 3;
}

message StartPitBattleResponse
{
	message MonsterDetails
	{
		uint64 owner = 1;
		string ownername = 2;
		uint64 id = 3;
		uint32 species = 4;
		string name = 5;
		uint32 hp = 6;
		uint32 attack = 7;
		uint32 defense = 8;
		uint32 stamina = 9;
		uint32 size = 10;
		uint32 level = 11;
		uint32 quickmove = 12;
		uint32 chargemove = 13;
	}

	bool ok = 1;
	repeated MonsterDetails defenders = 2;
}

message SetAttackerRequest
{
	uint64 monster = 1;
}

message StepPitBattleResponse
{
	enum PitBattleState
	{
		PIT_BATTLE_WAITING_FOR_ACTION = 0;
		PIT_BATTLE_ATTACK_QUICK_MOVE_NOT_EFFECTIVE = 1;
		PIT_BATTLE_ATTACK_QUICK_MOVE_EFFECTIVE = 2;
		PIT_BATTLE_ATTACK_QUICK_MOVE_SUPER_EFFECTIVE = 3;
		PIT_BATTLE_ATTACK_CHARGE_MOVE_NOT_EFFECTIVE = 4;
		PIT_BATTLE_ATTACK_CHARGE_MOVE_EFFECTIVE = 5;
		PIT_BATTLE_ATTACK_CHARGE_MOVE_SUPER_EFFECTIVE = 6;
		PIT_BATTLE_DEFEND_QUICK_MOVE_NOT_EFFECTIVE = 7;
		PIT_BATTLE_DEFEND_QUICK_MOVE_EFFECTIVE = 8;
		PIT_BATTLE_DEFEND_QUICK_MOVE_SUPER_EFFECTIVE = 9;
		PIT_BATTLE_DEFEND_QUICK_MOVE_DODGE = 10;
		PIT_BATTLE_DEFEND_CHARGE_MOVE_NOT_EFFECTIVE = 11;
		PIT_BATTLE_DEFEND_CHARGE_MOVE_EFFECTIVE = 12;
		PIT_BATTLE_DEFEND_CHARGE_MOVE_SUPER_EFFECTIVE = 13;
		PIT_BATTLE_DEFEND_CHARGE_MOVE_DODGE = 14;
		PIT_BATTLE_ATTACK_FAINT = 15;
		PIT_BATTLE_DEFEND_FAINT = 16;
		PIT_BATTLE_NEW_OPPONENT = 17;
		PIT_BATTLE_WIN = 18;
		PIT_BATTLE_LOSE = 19;
	}

	PitBattleState state = 1;
	uint32 charge = 2;
	uint32 attackerhp = 3;
	uint32 defenderhp = 4;
	uint64 opponent = 5;
}

message SetPitBattleActionRequest
{
	enum PitBattleAction
	{
		PIT_ACTION_NOT_CHOSEN = 0;
		PIT_ACTION_ATTACK_QUICK_MOVE = 1;
		PIT_ACTION_ATTACK_CHARGE_MOVE = 2;
		PIT_ACTION_DODGE = 3;
	}

	PitBattleAction action = 1;
}

message EndPitBattleResponse
{
	uint32 reputation = 1;
}

message HealMonsterRequest
{
	uint64 monster = 1;
	uint32 item = 2;
}

message HealMonsterResponse
{
	uint32 hp = 1;
	uint32 count = 2;
}

message GetLevel40FlagResponse
{
	string flag = 1;
}

message GetCatchEmAllFlagResponse
{
	string flag = 1;
}
